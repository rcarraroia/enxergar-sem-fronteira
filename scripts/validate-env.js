#!/usr/bin/env node

/**
 * =====================================================
 * VALIDADOR DE VARI√ÅVEIS DE AMBIENTE
 * =====================================================
 * Valida se todas as vari√°veis de ambiente necess√°rias est√£o configuradas
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configura√ß√£o das vari√°veis obrigat√≥rias
const REQUIRED_VARS = {
  // Supabase (Cr√≠ticas)
  VITE_SUPABASE_URL: {
    description: 'URL do projeto Supabase',
    pattern: /^https:\/\/.*\.supabase\.co$/,
    critical: true
  },
  VITE_SUPABASE_ANON_KEY: {
    description: 'Chave an√¥nima do Supabase',
    minLength: 100,
    critical: true
  },
  
  // APIs Externas (Importantes)
  ASAAS_API_KEY: {
    description: 'Chave da API Asaas para pagamentos',
    minLength: 20,
    critical: false
  },
  WHATSAPP_API_KEY: {
    description: 'Chave da API WhatsApp para mensagens',
    minLength: 20,
    critical: false
  },
  
  // Seguran√ßa (Cr√≠ticas)
  JWT_SECRET: {
    description: 'Chave secreta para JWT',
    minLength: 32,
    critical: true
  },
  ENCRYPTION_KEY: {
    description: 'Chave para criptografia de dados',
    minLength: 32,
    critical: true
  },
  
  // Email (Importante)
  SMTP_HOST: {
    description: 'Servidor SMTP',
    critical: false
  },
  SMTP_USER: {
    description: 'Usu√°rio SMTP',
    critical: false
  },
  SMTP_PASSWORD: {
    description: 'Senha SMTP',
    minLength: 8,
    critical: false
  }
};

// Cores para output
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function validateEnvironment() {
  log('üîç Validando vari√°veis de ambiente...', 'blue');
  log('', 'reset');
  
  const errors = [];
  const warnings = [];
  const success = [];
  
  // Verificar se arquivo .env existe
  const envPath = path.join(process.cwd(), '.env');
  if (!fs.existsSync(envPath)) {
    errors.push('‚ùå Arquivo .env n√£o encontrado! Copie .env.example para .env');
  }
  
  // Validar cada vari√°vel
  Object.entries(REQUIRED_VARS).forEach(([varName, config]) => {
    const value = process.env[varName];
    
    if (!value) {
      const message = `${config.critical ? '‚ùå' : '‚ö†Ô∏è'} ${varName}: ${config.description}`;
      if (config.critical) {
        errors.push(message);
      } else {
        warnings.push(message);
      }
      return;
    }
    
    // Validar comprimento m√≠nimo
    if (config.minLength && value.length < config.minLength) {
      const message = `‚ùå ${varName}: Muito curta (m√≠n: ${config.minLength} chars)`;
      errors.push(message);
      return;
    }
    
    // Validar padr√£o
    if (config.pattern && !config.pattern.test(value)) {
      const message = `‚ùå ${varName}: Formato inv√°lido`;
      errors.push(message);
      return;
    }
    
    // Sucesso
    success.push(`‚úÖ ${varName}: OK`);
  });
  
  // Mostrar resultados
  if (success.length > 0) {
    log('‚úÖ VARI√ÅVEIS V√ÅLIDAS:', 'green');
    success.forEach(msg => log(`  ${msg}`, 'green'));
    log('', 'reset');
  }
  
  if (warnings.length > 0) {
    log('‚ö†Ô∏è AVISOS (n√£o cr√≠ticos):', 'yellow');
    warnings.forEach(msg => log(`  ${msg}`, 'yellow'));
    log('', 'reset');
  }
  
  if (errors.length > 0) {
    log('‚ùå ERROS CR√çTICOS:', 'red');
    errors.forEach(msg => log(`  ${msg}`, 'red'));
    log('', 'reset');
    log('üö® Corrija os erros cr√≠ticos antes de continuar!', 'red');
    process.exit(1);
  }
  
  // Verifica√ß√µes adicionais de seguran√ßa
  validateSecurity();
  
  log('üéâ Todas as vari√°veis de ambiente est√£o v√°lidas!', 'green');
  log('', 'reset');
}

function validateSecurity() {
  log('üîí Verifica√ß√µes de seguran√ßa:', 'blue');
  
  // Verificar se n√£o est√° usando valores de exemplo
  const dangerousValues = [
    'your-api-key-here',
    'your-secret-here',
    'change-me',
    'example',
    'test123'
  ];
  
  Object.entries(REQUIRED_VARS).forEach(([varName, config]) => {
    const value = process.env[varName];
    if (value && dangerousValues.some(dangerous => 
      value.toLowerCase().includes(dangerous.toLowerCase())
    )) {
      log(`  ‚ö†Ô∏è ${varName}: Parece estar usando valor de exemplo!`, 'yellow');
    }
  });
  
  // Verificar NODE_ENV
  const nodeEnv = process.env.NODE_ENV;
  if (nodeEnv === 'production') {
    log('  ‚úÖ NODE_ENV: production', 'green');
  } else {
    log(`  ‚ö†Ô∏è NODE_ENV: ${nodeEnv || 'n√£o definido'} (deveria ser 'production')`, 'yellow');
  }
  
  log('', 'reset');
}

function generateEnvTemplate() {
  log('üìù Gerando template de .env...', 'blue');
  
  let template = '# Vari√°veis de ambiente - Enxergar Sem Fronteira\n';
  template += '# Gerado automaticamente - Configure os valores reais\n\n';
  
  Object.entries(REQUIRED_VARS).forEach(([varName, config]) => {
    template += `# ${config.description}\n`;
    template += `${varName}=\n\n`;
  });
  
  fs.writeFileSync('.env.template', template);
  log('‚úÖ Template salvo em .env.template', 'green');
}

// Executar valida√ß√£o
const args = process.argv.slice(2);

if (args.includes('--generate-template')) {
  generateEnvTemplate();
} else {
  validateEnvironment();
}

export { validateEnvironment, generateEnvTemplate };