# Script PowerShell para configurar pre-commit hooks

Write-Host "üîß Configurando pre-commit hooks..." -ForegroundColor Cyan

# Verificar se o npm est√° dispon√≠vel
try {
    npm --version | Out-Null
    Write-Host "‚úÖ npm encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå npm n√£o encontrado. Instale o Node.js primeiro." -ForegroundColor Red
    exit 1
}

# Verificar se o git est√° dispon√≠vel
try {
    git --version | Out-Null
    Write-Host "‚úÖ git encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå git n√£o encontrado. Instale o Git primeiro." -ForegroundColor Red
    exit 1
}

# Inicializar Husky se necess√°rio
if (-not (Test-Path ".husky")) {
    Write-Host "üêï Inicializando Husky..." -ForegroundColor Yellow
    npx husky init
}

# Configurar permiss√µes dos hooks no Git
Write-Host "üîê Configurando permiss√µes dos hooks..." -ForegroundColor Yellow
git update-index --chmod=+x .husky/pre-commit
git update-index --chmod=+x .husky/commit-msg
git update-index --chmod=+x .husky/pre-push

# Testar configura√ß√£o
Write-Host "üß™ Testando configura√ß√£o..." -ForegroundColor Yellow

# Testar lint-staged
Write-Host "Testando lint-staged..." -ForegroundColor Gray
try {
    npx lint-staged --version | Out-Null
    Write-Host "‚úÖ lint-staged configurado corretamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro na configura√ß√£o do lint-staged" -ForegroundColor Red
    exit 1
}

# Testar ESLint
Write-Host "Testando ESLint..." -ForegroundColor Gray
try {
    npx eslint --version | Out-Null
    Write-Host "‚úÖ ESLint configurado corretamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro na configura√ß√£o do ESLint" -ForegroundColor Red
    exit 1
}

# Testar Prettier
Write-Host "Testando Prettier..." -ForegroundColor Gray
try {
    npx prettier --version | Out-Null
    Write-Host "‚úÖ Prettier configurado corretamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro na configura√ß√£o do Prettier" -ForegroundColor Red
    exit 1
}

# Testar TypeScript
Write-Host "Testando TypeScript..." -ForegroundColor Gray
try {
    npm run type-check 2>$null | Out-Null
    Write-Host "‚úÖ TypeScript configurado corretamente" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Avisos de TypeScript encontrados (normal em desenvolvimento)" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéâ Pre-commit hooks configurados com sucesso!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã O que foi configurado:" -ForegroundColor Cyan
Write-Host "  ‚úÖ Husky para gerenciar git hooks" -ForegroundColor White
Write-Host "  ‚úÖ lint-staged para verificar apenas arquivos modificados" -ForegroundColor White
Write-Host "  ‚úÖ ESLint para verifica√ß√£o de qualidade de c√≥digo" -ForegroundColor White
Write-Host "  ‚úÖ Prettier para formata√ß√£o autom√°tica" -ForegroundColor White
Write-Host "  ‚úÖ TypeScript para verifica√ß√£o de tipos" -ForegroundColor White
Write-Host "  ‚úÖ Testes cr√≠ticos antes de commits" -ForegroundColor White
Write-Host "  ‚úÖ Valida√ß√£o de mensagens de commit" -ForegroundColor White
Write-Host "  ‚úÖ Verifica√ß√µes completas antes de push" -ForegroundColor White
Write-Host ""
Write-Host "üìù Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "  1. Fa√ßa um commit de teste: git commit -m 'test: configurar pre-commit hooks'" -ForegroundColor White
Write-Host "  2. Os hooks ser√£o executados automaticamente" -ForegroundColor White
Write-Host "  3. Arquivos ser√£o formatados automaticamente se necess√°rio" -ForegroundColor White
Write-Host ""
Write-Host "üí° Dicas:" -ForegroundColor Cyan
Write-Host "  - Use mensagens de commit no formato: tipo(escopo): descri√ß√£o" -ForegroundColor White
Write-Host "  - Exemplos: feat: nova funcionalidade, fix: corre√ß√£o de bug" -ForegroundColor White
Write-Host "  - Os hooks podem ser ignorados com --no-verify (n√£o recomendado)" -ForegroundColor White
