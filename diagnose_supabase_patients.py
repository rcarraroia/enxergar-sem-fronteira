#!/usr/bin/env python3
"""
üîç DIAGN√ìSTICO COMPLETO DO PROBLEMA PATIENTS
Conecta diretamente ao Supabase para identificar a causa real do erro 409
"""

from supabase import create_client, Client
import json
from datetime import datetime

# Configura√ß√µes extra√≠das de src/integrations/supabase/client.ts
SUPABASE_URL = "https://uoermayoxjaaomzjmuhp.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVvZXJtYXlveGphYW9temptdWhwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUxMjIwMjMsImV4cCI6MjA3MDY5ODAyM30.6MC0Vw5ZSmtvUc060hxnk20MrzXB-PhPdTVSPDoshTc"

def print_section(title):
    """Imprime se√ß√£o formatada"""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print('='*60)

def diagnose_patients_table():
    """Diagn√≥stico completo da tabela patients"""

    print("üöÄ Iniciando diagn√≥stico do Supabase...")

    try:
        # Conectar ao Supabase
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
        print("‚úÖ Conex√£o com Supabase estabelecida")

        # 1. VERIFICAR EXIST√äNCIA E ESTRUTURA DA TABELA
        print_section("ESTRUTURA DA TABELA PATIENTS")

        try:
            # Tentar buscar um registro para verificar estrutura
            sample_response = supabase.table('patients').select('*').limit(1).execute()
            print(f"‚úÖ Tabela 'patients' existe")

            if sample_response.data:
                print(f"üìä Estrutura detectada: {list(sample_response.data[0].keys())}")
            else:
                print("üìä Tabela vazia - buscando estrutura via inser√ß√£o de teste...")

        except Exception as e:
            print(f"‚ùå Erro ao acessar tabela 'patients': {e}")
            return

        # 2. CONTAR REGISTROS EXISTENTES
        print_section("CONTAGEM DE REGISTROS")

        try:
            count_response = supabase.table('patients').select('*', count='exact').execute()
            total_patients = count_response.count
            print(f"üìä Total de pacientes: {total_patients}")

        except Exception as e:
            print(f"‚ùå Erro ao contar registros: {e}")
            total_patients = 0

        # 3. VERIFICAR CPF E EMAIL ESPEC√çFICOS
        print_section("VERIFICA√á√ÉO DE DUPLICATAS")

        test_cpf = "11228730695"
        test_email = "pablook1515@yahoo.com.br"

        # Verificar CPF
        try:
            cpf_response = supabase.table('patients').select('*').eq('cpf', test_cpf).execute()
            if cpf_response.data:
                print(f"‚ö†Ô∏è  CPF {test_cpf} J√Å EXISTE:")
                for record in cpf_response.data:
                    print(f"   - ID: {record['id']}")
                    print(f"   - Nome: {record['nome']}")
                    print(f"   - Email: {record['email']}")
                    print(f"   - Criado: {record['created_at']}")
            else:
                print(f"‚úÖ CPF {test_cpf} N√ÉO existe no banco")

        except Exception as e:
            print(f"‚ùå Erro ao verificar CPF: {e}")

        # Verificar Email
        try:
            email_response = supabase.table('patients').select('*').eq('email', test_email).execute()
            if email_response.data:
                print(f"‚ö†Ô∏è  Email {test_email} J√Å EXISTE:")
                for record in email_response.data:
                    print(f"   - ID: {record['id']}")
                    print(f"   - Nome: {record['nome']}")
                    print(f"   - CPF: {record['cpf']}")
                    print(f"   - Criado: {record['created_at']}")
            else:
                print(f"‚úÖ Email {test_email} N√ÉO existe no banco")

        except Exception as e:
            print(f"‚ùå Erro ao verificar email: {e}")

        # 4. TESTE DE INSER√á√ÉO REAL
        print_section("TESTE DE INSER√á√ÉO DIRETA")

        test_data = {
            'nome': 'TESTE PYTHON DIAGN√ìSTICO',
            'email': 'teste.python.diagnostico@example.com',
            'telefone': '11999999999',
            'cpf': '99999999999',
            'data_nascimento': '1990-01-01',
            'consentimento_lgpd': True
        }

        try:
            print("üß™ Tentando inser√ß√£o de teste...")
            insert_response = supabase.table('patients').insert(test_data).execute()

            if insert_response.data:
                print("‚úÖ INSER√á√ÉO FUNCIONOU! O problema N√ÉO √© RLS ou constraints b√°sicas")
                print(f"üìä Registro criado: {insert_response.data[0]['id']}")

                # Limpar teste
                delete_response = supabase.table('patients').delete().eq('email', test_data['email']).execute()
                print("üßπ Registro de teste removido")

            else:
                print("‚ùå Inser√ß√£o falhou sem dados retornados")

        except Exception as e:
            print(f"‚ùå ERRO NA INSER√á√ÉO: {e}")
            print(f"üîç Tipo do erro: {type(e)}")

            # Tentar extrair detalhes do erro
            if hasattr(e, 'details'):
                print(f"üìã Detalhes: {e.details}")
            if hasattr(e, 'message'):
                print(f"üí¨ Mensagem: {e.message}")
            if hasattr(e, 'code'):
                print(f"üî¢ C√≥digo: {e.code}")

        # 5. TESTE COM DADOS EXATOS DO FORMUL√ÅRIO
        print_section("TESTE COM DADOS EXATOS DO FORMUL√ÅRIO")

        exact_data = {
            'nome': 'RENATO MAGNO C ALVES',
            'email': 'pablook1515@yahoo.com.br',
            'telefone': '31989527170',
            'cpf': '11228730695',
            'data_nascimento': '1991-03-17',
            'consentimento_lgpd': True
        }

        try:
            print("üéØ Tentando inser√ß√£o com dados EXATOS do formul√°rio...")
            exact_insert_response = supabase.table('patients').insert(exact_data).execute()

            if exact_insert_response.data:
                print("‚úÖ INSER√á√ÉO COM DADOS EXATOS FUNCIONOU!")
                print(f"üìä Registro criado: {exact_insert_response.data[0]['id']}")

                # N√ÉO remover - deixar para teste do formul√°rio
                print("‚ö†Ô∏è  Registro mantido para teste do formul√°rio")

            else:
                print("‚ùå Inser√ß√£o com dados exatos falhou")

        except Exception as e:
            print(f"‚ùå ERRO COM DADOS EXATOS: {e}")
            print("üîç Este √© provavelmente o mesmo erro do formul√°rio!")

        # 6. LISTAR √öLTIMOS REGISTROS
        print_section("√öLTIMOS REGISTROS")

        try:
            recent_response = supabase.table('patients').select('id, nome, email, cpf, created_at').order('created_at', desc=True).limit(5).execute()

            if recent_response.data:
                print("üìã √öltimos 5 registros:")
                for i, record in enumerate(recent_response.data, 1):
                    print(f"   {i}. {record['nome']} ({record['email']}) - {record['created_at']}")
            else:
                print("üìã Nenhum registro encontrado")

        except Exception as e:
            print(f"‚ùå Erro ao listar registros: {e}")

        print_section("DIAGN√ìSTICO CONCLU√çDO")
        print("üéØ Verifique os resultados acima para identificar o problema!")

    except Exception as e:
        print(f"üí• ERRO CR√çTICO na conex√£o: {e}")
        print("üîç Verifique se as credenciais est√£o corretas")

if __name__ == "__main__":
    diagnose_patients_table()
