#!/usr/bin/env python3
"""
üîç VERIFICA√á√ÉO DOS REQUISITOS PARA INTEGRA√á√ÉO N8N
Verifica se todas as tabelas e fun√ß√µes necess√°rias existem
"""

from supabase import create_client, Client

# Configura√ß√µes
SUPABASE_URL = "https://uoermayoxjaaomzjmuhp.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVvZXJtYXlveGphYW9temptdWhwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUxMjIwMjMsImV4cCI6MjA3MDY5ODAyM30.6MC0Vw5ZSmtvUc060hxnk20MrzXB-PhPdTVSPDoshTc"

def print_section(title):
    """Imprime se√ß√£o formatada"""
    print(f"\n{'='*70}")
    print(f"üîç {title}")
    print('='*70)

def verify_n8n_requirements():
    """Verificar todos os requisitos para integra√ß√£o N8N"""

    print("üöÄ Verificando requisitos para integra√ß√£o N8N...")

    try:
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

        # 1. VERIFICAR TABELAS PRINCIPAIS
        print_section("VERIFICA√á√ÉO DE TABELAS PRINCIPAIS")

        required_tables = ['patients', 'registrations', 'events', 'event_dates']

        for table in required_tables:
            try:
                count_response = supabase.table(table).select('*', count='exact').execute()
                print(f"‚úÖ Tabela '{table}': {count_response.count} registros")

                # Mostrar estrutura da primeira linha
                sample_response = supabase.table(table).select('*').limit(1).execute()
                if sample_response.data:
                    columns = list(sample_response.data[0].keys())
                    print(f"   üìã Colunas: {', '.join(columns)}")

            except Exception as e:
                print(f"‚ùå Tabela '{table}': {str(e)[:100]}...")

        # 2. VERIFICAR TABELA DE NOTIFICA√á√ïES
        print_section("VERIFICA√á√ÉO DA TABELA REGISTRATION_NOTIFICATIONS")

        try:
            notifications_response = supabase.table('registration_notifications').select('*', count='exact').execute()
            print(f"‚úÖ Tabela 'registration_notifications': {notifications_response.count} registros")

            # Mostrar estrutura
            if notifications_response.data:
                columns = list(notifications_response.data[0].keys())
                print(f"   üìã Colunas: {', '.join(columns)}")
            else:
                # Tentar inserir um teste para ver a estrutura
                print("   üìä Tabela vazia - testando estrutura...")

        except Exception as e:
            print(f"‚ùå Tabela 'registration_notifications': {str(e)[:100]}...")
            print("   ‚ö†Ô∏è  Tabela pode n√£o existir - precisa ser criada")

        # 3. VERIFICAR FUN√á√ÉO get_registration_details
        print_section("VERIFICA√á√ÉO DA FUN√á√ÉO GET_REGISTRATION_DETAILS")

        try:
            # Pegar um registration_id real para teste
            sample_reg = supabase.table('registrations').select('id').limit(1).execute()

            if sample_reg.data:
                test_reg_id = sample_reg.data[0]['id']
                print(f"   üß™ Testando com registration_id: {test_reg_id}")

                # Testar a fun√ß√£o RPC
                function_response = supabase.rpc('get_registration_details', {'reg_id': test_reg_id}).execute()

                if function_response.data:
                    print("‚úÖ Fun√ß√£o 'get_registration_details' existe e funciona")
                    print(f"   üìä Retorno: {function_response.data}")
                else:
                    print("‚ö†Ô∏è  Fun√ß√£o existe mas retornou dados vazios")

            else:
                print("   ‚ö†Ô∏è  Nenhum registro encontrado para teste")

        except Exception as e:
            print(f"‚ùå Fun√ß√£o 'get_registration_details': {str(e)[:100]}...")
            print("   ‚ö†Ô∏è  Fun√ß√£o pode n√£o existir - precisa ser criada")

        # 4. TESTE DE FLUXO COMPLETO
        print_section("TESTE DE FLUXO COMPLETO")

        try:
            # Simular o que o N8N faria
            print("üß™ Simulando fluxo completo do N8N...")

            # Pegar dados de uma inscri√ß√£o real
            full_registration = supabase.table('registrations').select('''
                id,
                status,
                created_at,
                patients (
                    nome,
                    email,
                    telefone,
                    cpf
                ),
                event_dates (
                    date,
                    start_time,
                    end_time,
                    events (
                        title,
                        location,
                        address
                    )
                )
            ''').limit(1).execute()

            if full_registration.data:
                reg_data = full_registration.data[0]
                print("‚úÖ Consulta completa de dados funcionando")
                print(f"   üìä Exemplo de dados dispon√≠veis:")
                print(f"   - Paciente: {reg_data['patients']['nome']}")
                print(f"   - Telefone: {reg_data['patients']['telefone']}")
                print(f"   - Evento: {reg_data['event_dates']['events']['title']}")
                print(f"   - Data: {reg_data['event_dates']['date']}")
                print(f"   - Hor√°rio: {reg_data['event_dates']['start_time']}")
                print(f"   - Local: {reg_data['event_dates']['events']['location']}")

                # Simular payload que seria enviado para N8N
                payload = {
                    "registration_id": reg_data['id'],
                    "patient_name": reg_data['patients']['nome'],
                    "phone": reg_data['patients']['telefone'],
                    "date": reg_data['event_dates']['date'],
                    "start_time": reg_data['event_dates']['start_time'],
                    "event_title": reg_data['event_dates']['events']['title'],
                    "event_location": reg_data['event_dates']['events']['location']
                }

                print(f"   üì§ Payload para N8N: {payload}")

            else:
                print("‚ö†Ô∏è  Nenhuma inscri√ß√£o encontrada para teste")

        except Exception as e:
            print(f"‚ùå Erro no teste de fluxo: {str(e)[:100]}...")

        # 5. VERIFICAR CAMPOS NECESS√ÅRIOS
        print_section("VERIFICA√á√ÉO DE CAMPOS NECESS√ÅRIOS")

        # Verificar se registrations tem delivery_date e delivery_status
        try:
            reg_sample = supabase.table('registrations').select('*').limit(1).execute()
            if reg_sample.data:
                reg_columns = list(reg_sample.data[0].keys())

                required_fields = ['delivery_date', 'delivery_status']
                for field in required_fields:
                    if field in reg_columns:
                        print(f"‚úÖ Campo '{field}' existe na tabela registrations")
                    else:
                        print(f"‚ùå Campo '{field}' N√ÉO existe - precisa ser adicionado")

        except Exception as e:
            print(f"‚ùå Erro ao verificar campos: {str(e)[:100]}...")

        # 6. RESUMO FINAL
        print_section("RESUMO DOS REQUISITOS")

        print("üéØ PARA IMPLEMENTAR O WEBHOOK N8N, PRECISAMOS:")
        print()
        print("üìã TABELAS (verificar se existem):")
        print("   ‚úÖ patients - OK")
        print("   ‚úÖ registrations - OK")
        print("   ‚úÖ events - OK")
        print("   ‚úÖ event_dates - OK")
        print("   ‚ùì registration_notifications - VERIFICAR")
        print()
        print("üîß FUN√á√ïES (verificar se existem):")
        print("   ‚ùì get_registration_details() - VERIFICAR")
        print()
        print("üìä CAMPOS ADICIONAIS (para fluxos futuros):")
        print("   ‚ùì registrations.delivery_date - VERIFICAR")
        print("   ‚ùì registrations.delivery_status - VERIFICAR")
        print()
        print("üéØ IMPLEMENTA√á√ÉO NO FRONTEND:")
        print("   - Adicionar chamada webhook ap√≥s sucesso da inscri√ß√£o")
        print("   - Usar token de seguran√ßa")
        print("   - Tratamento de erro n√£o-bloqueante")

        print_section("AN√ÅLISE CONCLU√çDA")
        print("üéØ Baseado nesta verifica√ß√£o, posso criar a spec detalhada!")

    except Exception as e:
        print(f"üí• ERRO CR√çTICO: {e}")

if __name__ == "__main__":
    verify_n8n_requirements()
