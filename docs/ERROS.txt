SOLICITAÇÃO DE ALTERAÇÃO TÉCNICA - REFACTOR DE SEGURANÇA
Para: Kiro Dev
De: [Seu Nome/Time]
Data: 21 de Agosto de 2025
Assunto: Mover Chaves de API do Frontend para Edge Functions do Supabase

1. Visão Geral e Problema Identificado
Identificamos uma vulnerabilidade crítica de segurança: todas as variáveis de ambiente que começam com o prefixo VITE_ são expostas publicamente no código do frontend. Isso inclui chaves de API sensíveis como a do Resend e da Vonage.

O objetivo desta solicitação é refatorar o código para que todas as chamadas de API que exigem segredos sejam feitas exclusivamente no servidor, garantindo que as chaves nunca sejam expostas ao navegador.

2. Arquitetura Proposta
Adotaremos um novo fluxo de comunicação. Em vez de chamar as APIs de terceiros diretamente do frontend, o fluxo será:

Frontend (Vite) ➔ Supabase Edge Function ➔ API de Terceiros (Resend/Vonage)

As chaves de API serão armazenadas como Secrets no Supabase e acessadas apenas pelas Edge Functions.

3. Plano de Ação (A ser executado pelo Kiro)
3.1. Refatoração do Backend (Edge Functions)

Criar as Funções:

Crie uma Edge Function para o envio de e-mails, por exemplo, send-email-resend.

Crie uma Edge Function para o envio de SMS, por exemplo, send-sms-vonage.

Acessar Segredos: Dentro de cada Edge Function, o Kiro deve acessar a chave da API do Supabase usando Deno.env.get('NOME_DA_VARIAVEL'). O nome da variável aqui deve ser exatamente como foi configurado no painel do Supabase (por exemplo, RESEND_API_KEY).

Lógica de Envio: Mova a lógica de envio de e-mail e SMS para dentro dessas funções. As funções devem receber os dados necessários (e-mail do destinatário, corpo da mensagem, etc.) no corpo da requisição (request.json()).

3.2. Refatoração do Frontend (Código do Cliente)

Remover as Variáveis: O Kiro deve remover todas as variáveis de ambiente sensíveis do código que tem o prefixo VITE_ (por exemplo, import.meta.env.VITE_RESEND_API_KEY).

Alterar as Chamadas: Substitua as chamadas diretas para as APIs de terceiros por uma chamada fetch simples para a URL da Edge Function correspondente.

Exemplo de Código (para o Kiro):

Antes (Inseguro):

JavaScript

// Exposto no navegador!
const resendApiKey = import.meta.env.VITE_RESEND_API_KEY; 
// ...código para enviar email com a chave exposta.
Depois (Seguro):

JavaScript

// Código seguro no frontend, sem chaves expostas
const response = await fetch('SUA_URL_DA_EDGE_FUNCTION', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    to: 'destinatario@email.com',
    subject: 'Assunto do E-mail',
    content: 'Conteúdo da mensagem',
  }),
});
4. Validação e Teste
Teste Funcional: Verifique se o envio de e-mails e SMS continua funcionando corretamente após as alterações.

Teste de Segurança: Peça ao Kiro para inspecionar o código-fonte da página (no navegador) e confirmar que nenhuma chave de API é visível.

Esta refatoração é crucial para a segurança do projeto e deve ser tratada com a máxima prioridade.
