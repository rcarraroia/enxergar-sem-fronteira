-- ============================================================================
-- SCRIPT: Criar Novo Usu√°rio Admin
-- Descri√ß√£o: Adiciona um novo usu√°rio administrador ao sistema
-- Data: 25 de Janeiro de 2025
-- Usu√°rio: rcarrarocoach@gmail.com
-- ============================================================================

-- Verificar se o usu√°rio j√° existe antes de criar
DO $$
DECLARE
    user_exists boolean := false;
    new_user_id uuid;
BEGIN
    -- Verificar se o usu√°rio j√° existe
    SELECT EXISTS(
        SELECT 1 FROM public.organizers
        WHERE email = 'rcarrarocoach@gmail.com'
    ) INTO user_exists;

    IF user_exists THEN
        RAISE NOTICE '‚ö†Ô∏è  Usu√°rio j√° existe: rcarrarocoach@gmail.com';
        RAISE NOTICE 'üìù Atualizando dados do usu√°rio existente...';

        -- Atualizar usu√°rio existente
        UPDATE public.organizers
        SET
            name = 'Rcarraro',
            role = 'admin',
            status = 'active',
            updated_at = now()
        WHERE email = 'rcarrarocoach@gmail.com'
        RETURNING id INTO new_user_id;

        RAISE NOTICE '‚úÖ Usu√°rio atualizado com sucesso! ID: %', new_user_id;
    ELSE
        RAISE NOTICE 'üìù Criando novo usu√°rio admin: rcarrarocoach@gmail.com';

        -- Criar novo usu√°rio admin
        INSERT INTO public.organizers (
            name,
            email,
            role,
            status,
            created_at,
            updated_at
        ) VALUES (
            'Rcarraro',
            'rcarrarocoach@gmail.com',
            'admin',
            'active',
            now(),
            now()
        ) RETURNING id INTO new_user_id;

        RAISE NOTICE '‚úÖ Usu√°rio criado com sucesso! ID: %', new_user_id;
    END IF;

    -- Verificar se a tabela de auditoria existe e registrar a a√ß√£o
    IF EXISTS (
        SELECT 1 FROM information_schema.tables
        WHERE table_name = 'role_audit_log'
        AND table_schema = 'public'
    ) THEN
        INSERT INTO public.role_audit_log (
            user_id,
            old_role,
            new_role,
            changed_by,
            reason,
            changed_at
        ) VALUES (
            new_user_id,
            CASE WHEN user_exists THEN 'existing' ELSE 'none' END,
            'admin',
            new_user_id,
            'Admin user created/updated via SQL script',
            now()
        );

        RAISE NOTICE 'üìã A√ß√£o registrada no log de auditoria';
    END IF;

    -- Exibir informa√ß√µes do usu√°rio criado/atualizado
    RAISE NOTICE '';
    RAISE NOTICE 'üë§ INFORMA√á√ïES DO USU√ÅRIO:';
    RAISE NOTICE '   ID: %', new_user_id;
    RAISE NOTICE '   Nome: Rcarraro';
    RAISE NOTICE '   Email: rcarrarocoach@gmail.com';
    RAISE NOTICE '   Role: admin';
    RAISE NOTICE '   Status: active';
    RAISE NOTICE '';

END $$;

-- ============================================================================
-- VERIFICA√á√ÉO FINAL
-- ============================================================================

-- Exibir dados do usu√°rio criado para confirma√ß√£o
SELECT
    'üéØ USU√ÅRIO ADMIN CRIADO/ATUALIZADO' as status,
    id,
    name,
    email,
    role,
    status,
    created_at,
    updated_at
FROM public.organizers
WHERE email = 'rcarrarocoach@gmail.com';

-- Exibir estat√≠sticas dos usu√°rios admin
SELECT
    'üìä ESTAT√çSTICAS DE ADMINS' as report_type,
    COUNT(*) as total_admins,
    COUNT(CASE WHEN status = 'active' THEN 1 END) as active_admins,
    COUNT(CASE WHEN status = 'inactive' THEN 1 END) as inactive_admins
FROM public.organizers
WHERE role = 'admin';

-- ============================================================================
-- INSTRU√á√ïES IMPORTANTES
-- ============================================================================

DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîê PR√ìXIMOS PASSOS IMPORTANTES:';
    RAISE NOTICE '';
    RAISE NOTICE '1. üìß CONFIGURAR AUTENTICA√á√ÉO:';
    RAISE NOTICE '   - O usu√°rio precisa fazer signup no Supabase Auth com o email: rcarrarocoach@gmail.com';
    RAISE NOTICE '   - Senha: M&151173c@';
    RAISE NOTICE '   - Isso criar√° o registro correspondente na tabela auth.users';
    RAISE NOTICE '';
    RAISE NOTICE '2. üîó VINCULAR CONTAS:';
    RAISE NOTICE '   - Ap√≥s o signup, o sistema automaticamente vincular√° as contas';
    RAISE NOTICE '   - Verificar se o auth.uid() corresponde ao organizers.id';
    RAISE NOTICE '';
    RAISE NOTICE '3. ‚úÖ TESTAR ACESSO:';
    RAISE NOTICE '   - Fazer login com as credenciais';
    RAISE NOTICE '   - Verificar se tem acesso √†s funcionalidades de admin';
    RAISE NOTICE '   - Testar as pol√≠ticas RLS';
    RAISE NOTICE '';
    RAISE NOTICE '4. üõ°Ô∏è  SEGURAN√áA:';
    RAISE NOTICE '   - Alterar a senha ap√≥s o primeiro login';
    RAISE NOTICE '   - Ativar 2FA se dispon√≠vel';
    RAISE NOTICE '   - Verificar logs de acesso';
    RAISE NOTICE '';
    RAISE NOTICE '‚ö†Ô∏è  IMPORTANTE: Este script apenas cria o registro na tabela organizers.';
    RAISE NOTICE '    O usu√°rio ainda precisa fazer signup no Supabase Auth para ativar a conta.';
    RAISE NOTICE '';
END $$;

-- ============================================================================
-- COMANDOS √öTEIS PARA VERIFICA√á√ÉO
-- ============================================================================

-- Para verificar se o usu√°rio foi criado corretamente:
-- SELECT * FROM public.organizers WHERE email = 'rcarrarocoach@gmail.com';

-- Para verificar todos os admins:
-- SELECT name, email, role, status FROM public.organizers WHERE role = 'admin';

-- Para verificar a vincula√ß√£o com auth.users (ap√≥s signup):
-- SELECT
--   o.name,
--   o.email,
--   o.role,
--   au.email as auth_email,
--   au.created_at as auth_created_at
-- FROM public.organizers o
-- LEFT JOIN auth.users au ON o.id = au.id
-- WHERE o.email = 'rcarrarocoach@gmail.com';
